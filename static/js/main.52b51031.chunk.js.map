{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["toast","configure","App","handleClick","setState","board","player_turn","state","index","this","winning_combinations","i","length","winning_row","p1","p2","p3","success","position","POSITION","TOP_CENTER","console","log","className","map","square","onClick","squareClicked","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSAKAA,IAAMC,Y,IAgFSC,E,kDA7Eb,aAAe,IAAD,8BACZ,gBAOFC,YAAc,WACZ,EAAKC,SAAS,CACZC,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxCC,YAAa,OATf,EAAKC,MAAQ,CACXF,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxCC,YAAa,KAJH,E,0DAeAE,GACZ,IAAIF,EAAcG,KAAKF,MAAMD,YACzBD,EAAQI,KAAKF,MAAMF,MACvBA,EAAMG,GAASF,EAWf,IAVA,IAAII,EAAuB,CACzB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAqBE,OAAQD,IAAK,CACpD,IAAIE,EAAcH,EAAqBC,GACnCG,EAAKD,EAAY,GACjBE,EAAKF,EAAY,GACjBG,EAAKH,EAAY,GAEN,IAAbR,EAAMS,IACNT,EAAMS,IAAOT,EAAMU,IACnBV,EAAMU,IAAOV,EAAMW,IACnBX,EAAMW,IAAOX,EAAMS,IAEnBd,IAAMiB,QAAN,iBAAwBX,EAAxB,KAAwC,CACtCY,SAAUlB,IAAMmB,SAASC,aAK/Bd,EAA6B,KAAfA,EAAqB,IAAM,IACzCe,QAAQC,IAAI,eAAgBhB,GAC5BG,KAAKL,SAAS,CACZE,YAAaA,EACbD,MAAOA,IAGTgB,QAAQC,IAAId,K,+BAGJ,IAAD,OACP,OACE,yBAAKe,UAAU,OACb,2CACA,yBAAKA,UAAU,SACZd,KAAKF,MAAMF,MAAMmB,KAAI,SAACC,EAAQjB,GAC7B,OACE,yBAAKkB,QAAS,kBAAM,EAAKC,cAAcnB,IAAQe,UAAU,UACvD,wBAAIA,UAAU,UAAUE,QAKhC,4BAAQF,UAAU,SAASG,QAASjB,KAAKN,aAAzC,c,GAtEUyB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.52b51031.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./App.css\";\r\n\r\ntoast.configure();\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      player_turn: \"X\",\r\n    };\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({\r\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      player_turn: \"X\",\r\n    });\r\n  };\r\n\r\n  squareClicked(index) {\r\n    let player_turn = this.state.player_turn;\r\n    let board = this.state.board;\r\n    board[index] = player_turn;\r\n    let winning_combinations = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < winning_combinations.length; i++) {\r\n      let winning_row = winning_combinations[i];\r\n      let p1 = winning_row[0];\r\n      let p2 = winning_row[1];\r\n      let p3 = winning_row[2];\r\n      if (\r\n        board[p1] != \"\" &&\r\n        board[p1] == board[p2] &&\r\n        board[p2] == board[p3] &&\r\n        board[p3] == board[p1]\r\n      ) {\r\n        toast.success(`winner ${player_turn} `, {\r\n          position: toast.POSITION.TOP_CENTER,\r\n        });\r\n      }\r\n    }\r\n\r\n    player_turn = player_turn == \"X\" ? \"O\" : \"X\";\r\n    console.log(\"player turn:\", player_turn);\r\n    this.setState({\r\n      player_turn: player_turn,\r\n      board: board,\r\n    });\r\n\r\n    console.log(index);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Tic Tac Toe</h1>\r\n        <div className=\"board\">\r\n          {this.state.board.map((square, index) => {\r\n            return (\r\n              <div onClick={() => this.squareClicked(index)} className=\"square\">\r\n                <h3 className=\"symbol\">{square}</h3>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <button className=\"button\" onClick={this.handleClick}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}